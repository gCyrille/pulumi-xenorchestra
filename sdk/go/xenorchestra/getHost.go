// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xenorchestra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/vatesfr/pulumi-xenorchestra/sdk/go/xenorchestra/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/vatesfr/pulumi-xenorchestra/sdk/go/xenorchestra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			host1, err := xenorchestra.GetXoaHost(ctx, &xenorchestra.GetXoaHostArgs{
//				NameLabel: "Your host",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = xenorchestra.NewVm(ctx, "node", &xenorchestra.VmArgs{
//				AffinityHost: pulumi.String(host1.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: xenorchestra.index/gethost.getHost has been deprecated in favor of xenorchestra.index/getxoahost.getXoaHost
func GetHost(ctx *pulumi.Context, args *GetHostArgs, opts ...pulumi.InvokeOption) (*GetHostResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHostResult
	err := ctx.Invoke("xenorchestra:index/getHost:getHost", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHost.
type GetHostArgs struct {
	// The name label of the host.
	NameLabel string `pulumi:"nameLabel"`
	// The tags (labels) applied to the given entity.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getHost.
type GetHostResult struct {
	// CPU information about the host. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
	Cpus map[string]int `pulumi:"cpus"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The memory size of the host.
	Memory int `pulumi:"memory"`
	// The memory usage of the host.
	MemoryUsage int `pulumi:"memoryUsage"`
	// The name label of the host.
	NameLabel string `pulumi:"nameLabel"`
	// Id of the pool that the host belongs to.
	PoolId string `pulumi:"poolId"`
	// The tags (labels) applied to the given entity.
	Tags []string `pulumi:"tags"`
}

func GetHostOutput(ctx *pulumi.Context, args GetHostOutputArgs, opts ...pulumi.InvokeOption) GetHostResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetHostResultOutput, error) {
			args := v.(GetHostArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("xenorchestra:index/getHost:getHost", args, GetHostResultOutput{}, options).(GetHostResultOutput), nil
		}).(GetHostResultOutput)
}

// A collection of arguments for invoking getHost.
type GetHostOutputArgs struct {
	// The name label of the host.
	NameLabel pulumi.StringInput `pulumi:"nameLabel"`
	// The tags (labels) applied to the given entity.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetHostOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostArgs)(nil)).Elem()
}

// A collection of values returned by getHost.
type GetHostResultOutput struct{ *pulumi.OutputState }

func (GetHostResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostResult)(nil)).Elem()
}

func (o GetHostResultOutput) ToGetHostResultOutput() GetHostResultOutput {
	return o
}

func (o GetHostResultOutput) ToGetHostResultOutputWithContext(ctx context.Context) GetHostResultOutput {
	return o
}

// CPU information about the host. The 'cores' key will contain the number of cpu cores and the 'sockets' key will contain the number of sockets.
func (o GetHostResultOutput) Cpus() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetHostResult) map[string]int { return v.Cpus }).(pulumi.IntMapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHostResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostResult) string { return v.Id }).(pulumi.StringOutput)
}

// The memory size of the host.
func (o GetHostResultOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostResult) int { return v.Memory }).(pulumi.IntOutput)
}

// The memory usage of the host.
func (o GetHostResultOutput) MemoryUsage() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostResult) int { return v.MemoryUsage }).(pulumi.IntOutput)
}

// The name label of the host.
func (o GetHostResultOutput) NameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostResult) string { return v.NameLabel }).(pulumi.StringOutput)
}

// Id of the pool that the host belongs to.
func (o GetHostResultOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostResult) string { return v.PoolId }).(pulumi.StringOutput)
}

// The tags (labels) applied to the given entity.
func (o GetHostResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHostResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHostResultOutput{})
}
