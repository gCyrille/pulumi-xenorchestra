// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xenorchestra

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/vatesfr/pulumi-xenorchestra/sdk/go/xenorchestra/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/vatesfr/pulumi-xenorchestra/sdk/go/xenorchestra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			host1, err := xenorchestra.GetXoaHost(ctx, &xenorchestra.GetXoaHostArgs{
//				NameLabel: "Your host",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create a single server network private network
//			_, err = xenorchestra.NewXoaNetwork(ctx, "private_network", &xenorchestra.XoaNetworkArgs{
//				NameLabel: pulumi.String("new network name"),
//				PoolId:    pulumi.String(host1.PoolId),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a network with a 22 VLAN tag from the eth0 device
//			_, err = xenorchestra.NewXoaNetwork(ctx, "vlan_network", &xenorchestra.XoaNetworkArgs{
//				NameLabel:       pulumi.String("new network name"),
//				PoolId:          pulumi.String(host1.PoolId),
//				SourcePifDevice: pulumi.String("eth0"),
//				Vlan:            pulumi.Int(22),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: xenorchestra.index/network.Network has been deprecated in favor of xenorchestra.index/xoanetwork.XoaNetwork
type Network struct {
	pulumi.CustomResourceState

	Automatic pulumi.BoolPtrOutput `pulumi:"automatic"`
	// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
	DefaultIsLocked pulumi.BoolPtrOutput `pulumi:"defaultIsLocked"`
	// The MTU of the network. Defaults to `1500` if unspecified.
	Mtu             pulumi.IntPtrOutput    `pulumi:"mtu"`
	NameDescription pulumi.StringPtrOutput `pulumi:"nameDescription"`
	// The name label of the network.
	NameLabel pulumi.StringOutput `pulumi:"nameLabel"`
	// Whether the network should use a network block device. Defaults to `false` if unspecified.
	Nbd pulumi.BoolPtrOutput `pulumi:"nbd"`
	// The pool id that this network should belong to.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
	SourcePifDevice pulumi.StringPtrOutput `pulumi:"sourcePifDevice"`
	// The vlan to use for the network. Defaults to `0` meaning no VLAN.
	Vlan pulumi.IntPtrOutput `pulumi:"vlan"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NameLabel == nil {
		return nil, errors.New("invalid value for required argument 'NameLabel'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("xenorchestra:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("xenorchestra:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	Automatic *bool `pulumi:"automatic"`
	// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
	DefaultIsLocked *bool `pulumi:"defaultIsLocked"`
	// The MTU of the network. Defaults to `1500` if unspecified.
	Mtu             *int    `pulumi:"mtu"`
	NameDescription *string `pulumi:"nameDescription"`
	// The name label of the network.
	NameLabel *string `pulumi:"nameLabel"`
	// Whether the network should use a network block device. Defaults to `false` if unspecified.
	Nbd *bool `pulumi:"nbd"`
	// The pool id that this network should belong to.
	PoolId *string `pulumi:"poolId"`
	// The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
	SourcePifDevice *string `pulumi:"sourcePifDevice"`
	// The vlan to use for the network. Defaults to `0` meaning no VLAN.
	Vlan *int `pulumi:"vlan"`
}

type NetworkState struct {
	Automatic pulumi.BoolPtrInput
	// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
	DefaultIsLocked pulumi.BoolPtrInput
	// The MTU of the network. Defaults to `1500` if unspecified.
	Mtu             pulumi.IntPtrInput
	NameDescription pulumi.StringPtrInput
	// The name label of the network.
	NameLabel pulumi.StringPtrInput
	// Whether the network should use a network block device. Defaults to `false` if unspecified.
	Nbd pulumi.BoolPtrInput
	// The pool id that this network should belong to.
	PoolId pulumi.StringPtrInput
	// The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
	SourcePifDevice pulumi.StringPtrInput
	// The vlan to use for the network. Defaults to `0` meaning no VLAN.
	Vlan pulumi.IntPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	Automatic *bool `pulumi:"automatic"`
	// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
	DefaultIsLocked *bool `pulumi:"defaultIsLocked"`
	// The MTU of the network. Defaults to `1500` if unspecified.
	Mtu             *int    `pulumi:"mtu"`
	NameDescription *string `pulumi:"nameDescription"`
	// The name label of the network.
	NameLabel string `pulumi:"nameLabel"`
	// Whether the network should use a network block device. Defaults to `false` if unspecified.
	Nbd *bool `pulumi:"nbd"`
	// The pool id that this network should belong to.
	PoolId string `pulumi:"poolId"`
	// The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
	SourcePifDevice *string `pulumi:"sourcePifDevice"`
	// The vlan to use for the network. Defaults to `0` meaning no VLAN.
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	Automatic pulumi.BoolPtrInput
	// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
	DefaultIsLocked pulumi.BoolPtrInput
	// The MTU of the network. Defaults to `1500` if unspecified.
	Mtu             pulumi.IntPtrInput
	NameDescription pulumi.StringPtrInput
	// The name label of the network.
	NameLabel pulumi.StringInput
	// Whether the network should use a network block device. Defaults to `false` if unspecified.
	Nbd pulumi.BoolPtrInput
	// The pool id that this network should belong to.
	PoolId pulumi.StringInput
	// The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
	SourcePifDevice pulumi.StringPtrInput
	// The vlan to use for the network. Defaults to `0` meaning no VLAN.
	Vlan pulumi.IntPtrInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.Automatic }).(pulumi.BoolPtrOutput)
}

// This argument controls whether the network should enforce VIF locking. This defaults to `false` which means that no filtering rules are applied.
func (o NetworkOutput) DefaultIsLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.DefaultIsLocked }).(pulumi.BoolPtrOutput)
}

// The MTU of the network. Defaults to `1500` if unspecified.
func (o NetworkOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

func (o NetworkOutput) NameDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.NameDescription }).(pulumi.StringPtrOutput)
}

// The name label of the network.
func (o NetworkOutput) NameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.NameLabel }).(pulumi.StringOutput)
}

// Whether the network should use a network block device. Defaults to `false` if unspecified.
func (o NetworkOutput) Nbd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.Nbd }).(pulumi.BoolPtrOutput)
}

// The pool id that this network should belong to.
func (o NetworkOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// The PIF device (eth0, eth1, etc) that will be used as an input during network creation. This parameter is required if a vlan is specified.
func (o NetworkOutput) SourcePifDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.SourcePifDevice }).(pulumi.StringPtrOutput)
}

// The vlan to use for the network. Defaults to `0` meaning no VLAN.
func (o NetworkOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.Vlan }).(pulumi.IntPtrOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
