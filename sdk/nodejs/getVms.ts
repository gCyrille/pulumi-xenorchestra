// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, powerState or host) for use in other resources.
 */
/** @deprecated xenorchestra.index/getvms.getVms has been deprecated in favor of xenorchestra.index/getxoavms.getXoaVms */
export function getVms(args: GetVmsArgs, opts?: pulumi.InvokeOptions): Promise<GetVmsResult> {
    pulumi.log.warn("getVms is deprecated: xenorchestra.index/getvms.getVms has been deprecated in favor of xenorchestra.index/getxoavms.getXoaVms")
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("xenorchestra:index/getVms:getVms", {
        "host": args.host,
        "poolId": args.poolId,
        "powerState": args.powerState,
    }, opts);
}

/**
 * A collection of arguments for invoking getVms.
 */
export interface GetVmsArgs {
    host?: string;
    /**
     * The ID of the pool the VM belongs to.
     */
    poolId: string;
    /**
     * The power state of the vms. (Running, Halted)
     */
    powerState?: string;
}

/**
 * A collection of values returned by getVms.
 */
export interface GetVmsResult {
    readonly host?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the pool the VM belongs to.
     */
    readonly poolId: string;
    /**
     * The power state of the vms. (Running, Halted)
     */
    readonly powerState?: string;
    /**
     * A list of information for all vms found in this pool.
     */
    readonly vms: outputs.GetVmsVm[];
}
/**
 * Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, powerState or host) for use in other resources.
 */
/** @deprecated xenorchestra.index/getvms.getVms has been deprecated in favor of xenorchestra.index/getxoavms.getXoaVms */
export function getVmsOutput(args: GetVmsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVmsResult> {
    pulumi.log.warn("getVms is deprecated: xenorchestra.index/getvms.getVms has been deprecated in favor of xenorchestra.index/getxoavms.getXoaVms")
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("xenorchestra:index/getVms:getVms", {
        "host": args.host,
        "poolId": args.poolId,
        "powerState": args.powerState,
    }, opts);
}

/**
 * A collection of arguments for invoking getVms.
 */
export interface GetVmsOutputArgs {
    host?: pulumi.Input<string>;
    /**
     * The ID of the pool the VM belongs to.
     */
    poolId: pulumi.Input<string>;
    /**
     * The power state of the vms. (Running, Halted)
     */
    powerState?: pulumi.Input<string>;
}
