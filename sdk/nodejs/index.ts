// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { BondedNetworkArgs, BondedNetworkState } from "./bondedNetwork";
export type BondedNetwork = import("./bondedNetwork").BondedNetwork;
export const BondedNetwork: typeof import("./bondedNetwork").BondedNetwork = null as any;
utilities.lazyLoad(exports, ["BondedNetwork"], () => require("./bondedNetwork"));

export { CloudConfigArgs, CloudConfigState } from "./cloudConfig";
export type CloudConfig = import("./cloudConfig").CloudConfig;
export const CloudConfig: typeof import("./cloudConfig").CloudConfig = null as any;
utilities.lazyLoad(exports, ["CloudConfig"], () => require("./cloudConfig"));

export { GetCloudConfigArgs, GetCloudConfigResult, GetCloudConfigOutputArgs } from "./getCloudConfig";
export const getCloudConfig: typeof import("./getCloudConfig").getCloudConfig = null as any;
export const getCloudConfigOutput: typeof import("./getCloudConfig").getCloudConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCloudConfig","getCloudConfigOutput"], () => require("./getCloudConfig"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostsArgs, GetHostsResult, GetHostsOutputArgs } from "./getHosts";
export const getHosts: typeof import("./getHosts").getHosts = null as any;
export const getHostsOutput: typeof import("./getHosts").getHostsOutput = null as any;
utilities.lazyLoad(exports, ["getHosts","getHostsOutput"], () => require("./getHosts"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPifArgs, GetPifResult, GetPifOutputArgs } from "./getPif";
export const getPif: typeof import("./getPif").getPif = null as any;
export const getPifOutput: typeof import("./getPif").getPifOutput = null as any;
utilities.lazyLoad(exports, ["getPif","getPifOutput"], () => require("./getPif"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { GetResourceSetArgs, GetResourceSetResult, GetResourceSetOutputArgs } from "./getResourceSet";
export const getResourceSet: typeof import("./getResourceSet").getResourceSet = null as any;
export const getResourceSetOutput: typeof import("./getResourceSet").getResourceSetOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSet","getResourceSetOutput"], () => require("./getResourceSet"));

export { GetSrArgs, GetSrResult, GetSrOutputArgs } from "./getSr";
export const getSr: typeof import("./getSr").getSr = null as any;
export const getSrOutput: typeof import("./getSr").getSrOutput = null as any;
utilities.lazyLoad(exports, ["getSr","getSrOutput"], () => require("./getSr"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetVdiArgs, GetVdiResult, GetVdiOutputArgs } from "./getVdi";
export const getVdi: typeof import("./getVdi").getVdi = null as any;
export const getVdiOutput: typeof import("./getVdi").getVdiOutput = null as any;
utilities.lazyLoad(exports, ["getVdi","getVdiOutput"], () => require("./getVdi"));

export { GetVmsArgs, GetVmsResult, GetVmsOutputArgs } from "./getVms";
export const getVms: typeof import("./getVms").getVms = null as any;
export const getVmsOutput: typeof import("./getVms").getVmsOutput = null as any;
utilities.lazyLoad(exports, ["getVms","getVmsOutput"], () => require("./getVms"));

export { GetXoaCloudConfigArgs, GetXoaCloudConfigResult, GetXoaCloudConfigOutputArgs } from "./getXoaCloudConfig";
export const getXoaCloudConfig: typeof import("./getXoaCloudConfig").getXoaCloudConfig = null as any;
export const getXoaCloudConfigOutput: typeof import("./getXoaCloudConfig").getXoaCloudConfigOutput = null as any;
utilities.lazyLoad(exports, ["getXoaCloudConfig","getXoaCloudConfigOutput"], () => require("./getXoaCloudConfig"));

export { GetXoaHostArgs, GetXoaHostResult, GetXoaHostOutputArgs } from "./getXoaHost";
export const getXoaHost: typeof import("./getXoaHost").getXoaHost = null as any;
export const getXoaHostOutput: typeof import("./getXoaHost").getXoaHostOutput = null as any;
utilities.lazyLoad(exports, ["getXoaHost","getXoaHostOutput"], () => require("./getXoaHost"));

export { GetXoaHostsArgs, GetXoaHostsResult, GetXoaHostsOutputArgs } from "./getXoaHosts";
export const getXoaHosts: typeof import("./getXoaHosts").getXoaHosts = null as any;
export const getXoaHostsOutput: typeof import("./getXoaHosts").getXoaHostsOutput = null as any;
utilities.lazyLoad(exports, ["getXoaHosts","getXoaHostsOutput"], () => require("./getXoaHosts"));

export { GetXoaNetworkArgs, GetXoaNetworkResult, GetXoaNetworkOutputArgs } from "./getXoaNetwork";
export const getXoaNetwork: typeof import("./getXoaNetwork").getXoaNetwork = null as any;
export const getXoaNetworkOutput: typeof import("./getXoaNetwork").getXoaNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getXoaNetwork","getXoaNetworkOutput"], () => require("./getXoaNetwork"));

export { GetXoaPifArgs, GetXoaPifResult, GetXoaPifOutputArgs } from "./getXoaPif";
export const getXoaPif: typeof import("./getXoaPif").getXoaPif = null as any;
export const getXoaPifOutput: typeof import("./getXoaPif").getXoaPifOutput = null as any;
utilities.lazyLoad(exports, ["getXoaPif","getXoaPifOutput"], () => require("./getXoaPif"));

export { GetXoaPoolArgs, GetXoaPoolResult, GetXoaPoolOutputArgs } from "./getXoaPool";
export const getXoaPool: typeof import("./getXoaPool").getXoaPool = null as any;
export const getXoaPoolOutput: typeof import("./getXoaPool").getXoaPoolOutput = null as any;
utilities.lazyLoad(exports, ["getXoaPool","getXoaPoolOutput"], () => require("./getXoaPool"));

export { GetXoaResourceSetArgs, GetXoaResourceSetResult, GetXoaResourceSetOutputArgs } from "./getXoaResourceSet";
export const getXoaResourceSet: typeof import("./getXoaResourceSet").getXoaResourceSet = null as any;
export const getXoaResourceSetOutput: typeof import("./getXoaResourceSet").getXoaResourceSetOutput = null as any;
utilities.lazyLoad(exports, ["getXoaResourceSet","getXoaResourceSetOutput"], () => require("./getXoaResourceSet"));

export { GetXoaStorageRepositoryArgs, GetXoaStorageRepositoryResult, GetXoaStorageRepositoryOutputArgs } from "./getXoaStorageRepository";
export const getXoaStorageRepository: typeof import("./getXoaStorageRepository").getXoaStorageRepository = null as any;
export const getXoaStorageRepositoryOutput: typeof import("./getXoaStorageRepository").getXoaStorageRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getXoaStorageRepository","getXoaStorageRepositoryOutput"], () => require("./getXoaStorageRepository"));

export { GetXoaTemplateArgs, GetXoaTemplateResult, GetXoaTemplateOutputArgs } from "./getXoaTemplate";
export const getXoaTemplate: typeof import("./getXoaTemplate").getXoaTemplate = null as any;
export const getXoaTemplateOutput: typeof import("./getXoaTemplate").getXoaTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getXoaTemplate","getXoaTemplateOutput"], () => require("./getXoaTemplate"));

export { GetXoaUserArgs, GetXoaUserResult, GetXoaUserOutputArgs } from "./getXoaUser";
export const getXoaUser: typeof import("./getXoaUser").getXoaUser = null as any;
export const getXoaUserOutput: typeof import("./getXoaUser").getXoaUserOutput = null as any;
utilities.lazyLoad(exports, ["getXoaUser","getXoaUserOutput"], () => require("./getXoaUser"));

export { GetXoaVdiArgs, GetXoaVdiResult, GetXoaVdiOutputArgs } from "./getXoaVdi";
export const getXoaVdi: typeof import("./getXoaVdi").getXoaVdi = null as any;
export const getXoaVdiOutput: typeof import("./getXoaVdi").getXoaVdiOutput = null as any;
utilities.lazyLoad(exports, ["getXoaVdi","getXoaVdiOutput"], () => require("./getXoaVdi"));

export { GetXoaVmsArgs, GetXoaVmsResult, GetXoaVmsOutputArgs } from "./getXoaVms";
export const getXoaVms: typeof import("./getXoaVms").getXoaVms = null as any;
export const getXoaVmsOutput: typeof import("./getXoaVms").getXoaVmsOutput = null as any;
utilities.lazyLoad(exports, ["getXoaVms","getXoaVmsOutput"], () => require("./getXoaVms"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceSetArgs, ResourceSetState } from "./resourceSet";
export type ResourceSet = import("./resourceSet").ResourceSet;
export const ResourceSet: typeof import("./resourceSet").ResourceSet = null as any;
utilities.lazyLoad(exports, ["ResourceSet"], () => require("./resourceSet"));

export { VdiArgs, VdiState } from "./vdi";
export type Vdi = import("./vdi").Vdi;
export const Vdi: typeof import("./vdi").Vdi = null as any;
utilities.lazyLoad(exports, ["Vdi"], () => require("./vdi"));

export { VmArgs, VmState } from "./vm";
export type Vm = import("./vm").Vm;
export const Vm: typeof import("./vm").Vm = null as any;
utilities.lazyLoad(exports, ["Vm"], () => require("./vm"));

export { XoaBondedNetworkArgs, XoaBondedNetworkState } from "./xoaBondedNetwork";
export type XoaBondedNetwork = import("./xoaBondedNetwork").XoaBondedNetwork;
export const XoaBondedNetwork: typeof import("./xoaBondedNetwork").XoaBondedNetwork = null as any;
utilities.lazyLoad(exports, ["XoaBondedNetwork"], () => require("./xoaBondedNetwork"));

export { XoaNetworkArgs, XoaNetworkState } from "./xoaNetwork";
export type XoaNetwork = import("./xoaNetwork").XoaNetwork;
export const XoaNetwork: typeof import("./xoaNetwork").XoaNetwork = null as any;
utilities.lazyLoad(exports, ["XoaNetwork"], () => require("./xoaNetwork"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "xenorchestra:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "xenorchestra:index/bondedNetwork:BondedNetwork":
                return new BondedNetwork(name, <any>undefined, { urn })
            case "xenorchestra:index/cloudConfig:CloudConfig":
                return new CloudConfig(name, <any>undefined, { urn })
            case "xenorchestra:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "xenorchestra:index/resourceSet:ResourceSet":
                return new ResourceSet(name, <any>undefined, { urn })
            case "xenorchestra:index/vdi:Vdi":
                return new Vdi(name, <any>undefined, { urn })
            case "xenorchestra:index/vm:Vm":
                return new Vm(name, <any>undefined, { urn })
            case "xenorchestra:index/xoaBondedNetwork:XoaBondedNetwork":
                return new XoaBondedNetwork(name, <any>undefined, { urn })
            case "xenorchestra:index/xoaNetwork:XoaNetwork":
                return new XoaNetwork(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("xenorchestra", "index/acl", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/bondedNetwork", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/cloudConfig", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/network", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/resourceSet", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/vdi", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/vm", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/xoaBondedNetwork", _module)
pulumi.runtime.registerResourceModule("xenorchestra", "index/xoaNetwork", _module)
pulumi.runtime.registerResourcePackage("xenorchestra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:xenorchestra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
